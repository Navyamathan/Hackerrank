import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'happyLadybugs' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING b as parameter.
     */

    public static String happyLadybugs(String b) {
        
        List<String> list = Arrays.asList(b.split(""));
        HashMap<String,Integer> map = new HashMap<>();
        int count = 0;
        
        for(String temp : list)
        {
            if(!temp.equals("_"))
            {
                if(map.containsKey(temp))
            {
                int value = map.get(temp)+1;
                map.put(temp, value);
            }
            else
            {
                map.put(temp,1);
            }
            }
            else
            {
                count++;
            }
        }
        
        for(int count1 : map.values())
        {
            if(count1 < 2)
            {
                return "NO";
            }
        }
        
        boolean found = true;
        if(count == 0)
        {
            for(int i=0; i<list.size(); i++)
            {
                if(i == 0)
                {
                    if(list.get(0).equals(list.get(0+1)))
                    {
                        found = true;
                    }
                    else
                    {
                        found = false;
                        break;
                    }
                }
                else if(i == list.size()-1)
                {
                    if(list.get(list.size()-1).equals(list.get(list.size()-2)))
                    {
                        found = true;
                    }
                    else
                    {
                        found = false;
                        break;
                    }
                }
                else
                {
                     if(list.get(i).equals(list.get(i+1)) || list.get(i).equals(list.get(i-1)))
                    {
                        found = true;
                    }
                    else
                    {
                        found = false;
                        break;
                    }
                }
            }
        }
        
        if(!found)
        {
            return "NO";
        }
        return "YES";

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int g = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, g).forEach(gItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                String b = bufferedReader.readLine();

                String result = Result.happyLadybugs(b);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
