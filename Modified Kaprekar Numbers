import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'kaprekarNumbers' function below.
     *
     * The function accepts following parameters:
     *  1. INTEGER p
     *  2. INTEGER q
     */

    public static void kaprekarNumbers(int p, int q) {
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = p; i<= q; i++)
        {
            String value = String.valueOf(i);
            long square = (long) i*i;
            String string = String.valueOf(square);
            
            int d = string.length()-value.length();

            String first1 = string.substring(0,d);
            String second1 = string.substring(d);
           
           long first =0;
           long second =0;
           if(!first1.isEmpty())
           {
            first = Integer.parseInt(first1);
           }
           if(!second1.isEmpty())
           {
            second = Integer.parseInt(second1);
           }

            if(first+second == i)
            {
                list.add(i);
            }
        }
        
        if(list.isEmpty())
        {
            System.out.println("INVALID RANGE");
        }
        else
        {
            for(int temp : list)
            {
                System.out.print(temp+" ");
            }
        }
       
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int p = Integer.parseInt(bufferedReader.readLine().trim());

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        Result.kaprekarNumbers(p, q);

        bufferedReader.close();
    }
}
